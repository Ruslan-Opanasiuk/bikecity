import { useEffect } from "react";
import locationTerms from "../../config/locationTerms";
import PathConfigs from "../../config/PathConfigs";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectTrigger,
  SelectContent,
  SelectItem,
  SelectValue,
} from "../ui/select";

/**
 * üõ† –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–≥—ÉB–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ B4:
 * B–∏–±—ñ—Ä –Ω–∞–ø—Ä—è–º–∫—É, –ø—ñ–∫—Ç–æ–≥—Ä–∞–º–∏, –Ω–∞–∑B–∏, –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –Ω–æ–º–µ—Ä—É –º–∞—Ä—à—Ä—É—Ç—É —Ç–æ—â–æ.
 */
function B4B7ItemSettings({ index, label, params, setParams, isTooLong, tableType, isB7 }) {
  // === [1] –û–ë–†–û–ë–ù–ò–ö–ò –ó–ú–Ü–ù –ü–û–õ–ÜB ===

  // –ó–º—ñ–Ω–∞ –Ω–∞–ø—Ä—è–º–∫—É (—Å—Ç—Ä—ñ–ª–∫–∏)
  const handleDirectionChange = (value) => {
    setParams({ ...params, direction: value });
  };

  // –ó–º—ñ–Ω–∞ –ø—ñ–∫—Ç–æ–≥—Ä–∞–º–∏
  const handleIconChange = (value) => {
    const newIcon = value === "none" ? null : value;
    const isCenterOrRoute = newIcon === "cityCentre" || newIcon === "bicycleRoute";

    const isChangingFromBicycleToOther =
      params.icon === "bicycleRoute" && newIcon !== "bicycleRoute";

    const baseParams = {
      ...params,
      icon: newIcon,
      mainText: "",
      subText: isCenterOrRoute ? "" : params.subText,
      isUrbanCenter: false,
      customUa: "",
      customEn: "",
      // üßº –æ—á–∏—â–∞—î–º–æ –Ω–æ–º–µ—Ä, —è–∫—â–æ B–∏—Ö—ñ–¥ –∑ B–µ–ª–æ–º–∞—Ä—à—Ä—É—Ç—É
      ...(isChangingFromBicycleToOther && { routeNumber: "" }),
    };

    // –Ø–∫—â–æ —Ü–µ B–µ–ª–æ–º–∞—Ä—à—Ä—É—Ç ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ –ª–∏—à–µ –æ–¥–Ω—É –∞–∫—Ç–∏B–Ω—É –ø–æ–∑–Ω–∞—á–∫—É (—è–∫—â–æ —î)
    if (newIcon === "bicycleRoute") {
      const allowed = ["showEurovelo", "showVeloParking", "showVeloSTO"];
      const firstActive = allowed.find((key) => params[key]);

      const cleared = allowed.reduce((acc, key) => {
        acc[key] = key === firstActive;
        return acc;
      }, {});

      setParams({ ...baseParams, ...cleared });
    } else {
      setParams(baseParams);
    }
  };



  // –ó–º—ñ–Ω–∞ –æ—Å–Ω–æB–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É (–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)
  const handleMainTextChange = (value) => {
    const clearSubText = value === "–¶–µ–Ω—Ç—Ä –º—ñ—Å—Ç–∞" || value === "B–µ–ª–æ–º–∞—Ä—à—Ä—É—Ç";

    // –Ø–∫—â–æ –æ–±—Ä–∞–Ω–æ –æ–±‚Äô—î–¥–Ω–∞–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ "–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π"
    const actualValue =
      value === "–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π / –ª–æ–∫–∞–ª—å–Ω–∏–π" ? "–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π" : value;

    setParams({
      ...params,
      mainText: actualValue,
      subText: clearSubText ? "" : params.subText,
    });
  };


  // B–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä—É –º–∞—Ä—à—Ä—É—Ç—É (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏, –Ω–µ –±—ñ–ª—å—à–µ 2)
  const handleRouteNumberChange = (e) => {
    let value = e.target.value.replace(/\D/g, "");
    if (value.startsWith("0")) value = value.slice(1);
    value = value.slice(0, 2);
    setParams({ ...params, routeNumber: value });
  };

  // –ß–µ–∫–±–æ–∫—Å "–Ñ —Ü–µ–Ω—Ç—Ä–æ–º –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É"
  const handleUrbanCenterToggle = (e) => {
    setParams({ ...params, isUrbanCenter: e.target.checked });
  };

  // B–ª–∞—Å–Ω–∞ –Ω–∞–∑B–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
  const handleCustomUaChange = (e) => {
    setParams({ ...params, customUa: e.target.value });
  };

  // B–ª–∞—Å–Ω–∞ –Ω–∞–∑B–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é
  const handleCustomEnChange = (e) => {
    setParams({ ...params, customEn: e.target.value });
  };

  // –ß–µ–∫–±–æ–∫—Å "–¢–∏–º—á–∞—Å–æB–∏–π –º–∞—Ä—à—Ä—É—Ç"
  const handleTemporaryRouteToggle = (e) => {
    setParams({ ...params, isTemporaryRoute: e.target.checked });
  };

  // === [2] –°–ü–ï–¶–Ü–ê–õ–¨–ù–ê –ü–†–êB–ö–ê –î–õ–Ø –°–ï–ó–û–ù–ù–ò–• –¢–ê–ë–õ–ò–¶–¨ ===
  // –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—è —Å–µ–∑–æ–Ω–Ω–∞, –∞ B–∏–±—Ä–∞–Ω–æ "–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π" ‚Äî –∑–º—ñ–Ω—é—î–º–æ –Ω–∞ "–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π"
  useEffect(() => {
    if (tableType === "seasonal" && params.mainText === "–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π") {
      setParams({ ...params, mainText: "–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π" });
    }
  }, [tableType, params.mainText]);

  // === [3] B–ê–†–Ü–ê–ù–¢–ò –ù–ê–ü–†–Ø–ú–ö–ÜB –¢–ê –Ü–ö–û–ù–û–ö ===

  // –£—Å—ñ –Ω–∞–ø—Ä—è–º–∫–∏
  const allDirections = [
    { value: "straight", label: "–ü—Ä—è–º–æ", icon: PathConfigs.smallArrow },
    { value: "left", label: "–õ—ñ–≤–æ—Ä—É—á", icon: PathConfigs.smallArrow },
    { value: "right", label: "–ü—Ä–∞–≤–æ—Ä—É—á", icon: PathConfigs.smallArrow },
    { value: "straight-left", label: "–ü—Ä—è–º–æ —ñ –ª—ñ–≤–æ—Ä—É—á", icon: PathConfigs.smallArrow },
    { value: "straight-right", label: "–ü—Ä—è–º–æ —ñ –ø—Ä–∞–≤–æ—Ä—É—á", icon: PathConfigs.smallArrow },
    { value: "end", label: "–ö—ñ–Ω–µ—Ü—å –º–∞—Ä—à—Ä—É—Ç—É", icon: null },
  ];

  // –ü—Ä–∏—Ö–æB—É—î–º–æ "–ö—ñ–Ω–µ—Ü—å –º–∞—Ä—à—Ä—É—Ç—É", —è–∫—â–æ —Ü–µ –Ω–µ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
  const directions = index === 0
    ? allDirections
    : allDirections.filter((d) => d.value !== "end");

  // –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ø—ñ–¥–ø–∏—Å–∏ –¥–æ —ñ–∫–æ–Ω–æ–∫
  const iconLabelsUa = {
    cityCentre: "–¶–µ–Ω—Ç—Ä –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É",
    interchange: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞ —Ä–æ–∑–≤'—è–∑–∫–∞",
    bridge: "–ú—ñ—Å—Ç",
    port: "–ü–æ—Ä—Ç",
    airport: "–ê–µ—Ä–æ–ø–æ—Ä—Ç",
    settlement: "–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç",
    railStation: "–ó–∞–ª—ñ–∑–Ω–∏—á–Ω–∏–π –æ–±'—î–∫—Ç",
    busStation: "–ê–≤—Ç–æ–±—É—Å–Ω–∏–π –æ–±'—î–∫—Ç",
    water: "B–æ–¥–Ω–∏–π –æ–±'—î–∫—Ç",
    bicycleRoute: "B–µ–ª–æ–º–∞—Ä—à—Ä—É—Ç",
    streetNetwork: "B—É–ª–∏—á–Ω–æ-–¥–æ—Ä–æ–∂–Ω—è –º–µ—Ä–µ–∂–∞",
    district: "–ß–∞—Å—Ç–∏–Ω–∞ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É",
    other: "–Ü–Ω—à–∏–π –æ–±'—î–∫—Ç",
  };

  // –ü–æ–±—É–¥–æB–∞ —Å–ø–∏—Å–∫—É —ñ–∫–æ–Ω–æ–∫ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
  const iconOptions = Object.keys(locationTerms).map((key) => {
    let iconKey = key;
    if (key === "water") iconKey = "waves";
    if (key === "bicycleRoute") iconKey = "bicycle";

    return {
      value: key,
      label: iconLabelsUa[key] || key,
      icon: PathConfigs[iconKey],
    };
  });


  // B–∞—Ä—ñ–∞–Ω—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞–ª–µ–∂–Ω–æ B—ñ–¥ –æ–±—Ä–∞–Ω–æ—ó —ñ–∫–æ–Ω–∫–∏
  let categoryOptionsRaw = params.icon && locationTerms[params.icon]
    ? Object.keys(locationTerms[params.icon]).filter((key) => {
        if (tableType === "seasonal" && key === "–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π") return false;
        return true;
      })
    : [];

  let categoryOptions = categoryOptionsRaw;

  if (params.direction === "end") {
    const hasRegional = categoryOptionsRaw.includes("–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π");
    const hasLocal = categoryOptionsRaw.includes("–õ–æ–∫–∞–ª—å–Ω–∏–π");

    if (hasRegional || hasLocal) {
      categoryOptions = categoryOptionsRaw.filter(
        (item) => item !== "–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π" && item !== "–õ–æ–∫–∞–ª—å–Ω–∏–π"
      );

      categoryOptions.unshift("–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π / –ª–æ–∫–∞–ª—å–Ω–∏–π");
    }
  }


  // === [4] –£–ú–ûB–ò B–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø ===
  const isBicycleRoute =
    params.icon === "bicycleRoute" || params.mainText === "B–µ–ª–æ–º–∞—Ä—à—Ä—É—Ç";

  const shouldShowNameField =
    !isBicycleRoute &&
    params.icon !== "cityCentre" &&
    !["–¶–µ–Ω—Ç—Ä –º—ñ—Å—Ç–∞", "B–µ–ª–æ–º–∞—Ä—à—Ä—É—Ç"].includes(params.mainText);

  // === [5] –†–ï–ù–î–ï–† –§–û–†–ú–ò ===
  return (
    <div className="bg-white border border-gray-300 p-6 shadow-md w-fit">
      <p className="text-xl font-semibold mb-6 text-center">{label}</p>

      <div className="space-y-4">

        {/* === [5.1] –ù–∞–ø—Ä—è–º–æ–∫ —Ä—É—Ö—É === */}
        {!isB7 && (
        <div className="flex items-center gap-4">
          <label className="w-48 font-medium">–ù–∞–ø—Ä—è–º–æ–∫:</label>
          <Select value={params.direction} onValueChange={handleDirectionChange}>
            <SelectTrigger className="w-[260px]">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {directions.map(({ value, label, icon }) => {
                const rotation = B4B7ItemSettings.directionLayout[value]?.rotation || 0;
                return (
                  <SelectItem key={value} value={value}>
                    <div className="flex items-center gap-2">
                      {icon ? (
                        <svg
                          width={24}
                          height={24}
                          viewBox={`0 0 ${icon.width} ${icon.height}`}
                          className="text-gray-700"
                        >
                          <path
                            d={icon.d}
                            fill="currentColor"
                            fillRule="evenodd"
                            transform={`rotate(${rotation} ${icon.width / 2} ${icon.height / 2}) scale(${icon.scale})`}
                          />
                        </svg>
                      ) : (
                        <span className="w-6 inline-block" />
                      )}
                      <span>{label}</span>
                    </div>
                  </SelectItem>
                );
              })}
            </SelectContent>
          </Select>
        </div>
        )}

        {/* === [5.2] –ü—ñ–∫—Ç–æ–≥—Ä–∞–º–∞ === */}
        <div className="flex items-center gap-4">
          <label className="w-48 font-medium">–ü—ñ–∫—Ç–æ–≥—Ä–∞–º–∞:</label>
          <Select value={params.icon ?? ""} onValueChange={handleIconChange}>
            <SelectTrigger className="w-[260px]">
              <SelectValue placeholder="–û–±–µ—Ä—ñ—Ç—å –ø—ñ–∫—Ç–æ–≥—Ä–∞–º—É" />
            </SelectTrigger>
            <SelectContent>
              {iconOptions.map(({ value, label, icon }) => (
                <SelectItem key={value} value={value}>
                  <div className="flex items-center gap-2">
                    {icon ? (
                      <svg
                        width={24}
                        height={24}
                        viewBox={`0 0 ${icon.width} ${icon.height}`}
                        className="text-gray-700"
                      >
                        <path d={icon.d} fill="currentColor" fillRule="evenodd" />
                      </svg>
                    ) : (
                      <span className="w-6 inline-block" />
                    )}
                    <span>{label}</span>
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* === [5.3] –ì–∞–ª–æ—á–∫–∞: "–Ñ —Ü–µ–Ω—Ç—Ä–æ–º –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É" === */}
        {params.icon === "streetNetwork" && (
          <div className="flex items-center gap-2 ml-52">
            <input
              type="checkbox"
              id="isUrbanCenter"
              checked={params.isUrbanCenter || false}
              onChange={handleUrbanCenterToggle}
            />
            <label htmlFor="isUrbanCenter" className="text-sm">–Ñ —Ü–µ–Ω—Ç—Ä–æ–º –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É</label>
          </div>
        )}

        {/* === [5.4] –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ B–ª–∞—Å–Ω–∞ –Ω–∞–∑B–∞ === */}
        {params.icon === "other" ? (
          // B–ª–∞—Å–Ω–∏–π —Ç–µ–∫—Å—Ç (other)
          <div className="flex items-start gap-4">
            <label className="w-48 font-medium mt-2">–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</label>
            <div className="flex flex-col gap-1">
              <Input
                value={params.customUa || ""}
                onChange={handleCustomUaChange}
                placeholder="B–µ–¥—ñ—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –Ω–∞–∑–≤—É"
                className="w-[260px]"
              />
              <Input
                value={params.customEn || ""}
                onChange={handleCustomEnChange}
                placeholder="B–µ–¥—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é"
                className="w-[260px]"
              />
            </div>
          </div>
        ) : (
          // B–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –≥–æ—Ç–æB–æ–≥–æ —Å–ø–∏—Å–∫—É
          <div className="flex items-center gap-4">
            <label className="w-48 font-medium">–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</label>
            <Select value={params.mainText} onValueChange={handleMainTextChange}>
            <SelectTrigger className="w-[260px]">
              <div className="truncate">
                {params.direction === "end" &&
                (params.mainText === "–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π" || params.mainText === "–õ–æ–∫–∞–ª—å–Ω–∏–π")
                  ? "–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π / –ª–æ–∫–∞–ª—å–Ω–∏–π"
                  : params.mainText || "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"}
              </div>
            </SelectTrigger>

              <SelectContent>
                {categoryOptions.map((item) => (
                  <SelectItem key={item} value={item}>
                    {item}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        )}

        {/* === [5.5] –ù–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç—É –∞–±–æ –Ω–∞–∑B–∞ === */}
        {isBicycleRoute ? (
          <div className="flex items-center gap-4">
            <label className="w-48 font-medium">–ù–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç—É:</label>
            <Input
              inputMode="numeric"
              pattern="\d*"
              value={params.routeNumber || ""}
              onChange={handleRouteNumberChange}
              placeholder="B–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä—É B—ñ–¥ 1 –¥–æ 99"
              className="w-[260px]"
            />
          </div>
        ) : shouldShowNameField && (
          <div className="flex items-center gap-4">
            <label className="w-48 font-medium">–ù–∞–∑–≤–∞:</label>
            <Input
              value={params.subText || ""}
              onChange={(e) => setParams({ ...params, subText: e.target.value })}
              placeholder="B–µ–¥—ñ—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –Ω–∞–∑–≤—É"
              className="w-[260px]"
              disabled={isTooLong}
            />
          </div>
        )}

        {/* === [5.6] –ß–µ–∫–±–æ–∫—Å "–¢–∏–º—á–∞—Å–æB–∏–π –º–∞—Ä—à—Ä—É—Ç" === */}
        {tableType !== "temporary" && (
          <div className="flex items-center gap-2 ml-52">
            <input
              type="checkbox"
              id="isTemporaryRoute"
              checked={params.isTemporaryRoute || false}
              onChange={handleTemporaryRouteToggle}
            />
            <label htmlFor="isTemporaryRoute" className="text-sm">–¢–∏–º—á–∞—Å–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç</label>
          </div>
        )}

        {/* === [5.7] –î–æ–¥–∞—Ç–∫–æB—ñ –ø–æ–∑–Ω–∞—á–∫–∏ (—ñ–∫–æ–Ω–∫–∏) === */}
        <div className="pt-4">
          <p className="font-medium text-center mb-2">–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–∑–Ω–∞—á–∫–∏:</p>
          <div className="flex justify-center border rounded overflow-hidden w-fit mx-auto">
            {[
              { key: "showEurovelo", iconKey: "eurovelo" },
              { key: "showVeloParking", iconKey: "veloParking" },
              { key: "showVeloSTO", iconKey: "veloSTO" },
            ].map(({ key, iconKey }) => {
              const icon = PathConfigs[iconKey];
              const isActive = params[key];

              return (
                <button
                  key={key}
                  type="button"
                  className={`px-4 py-2 border-r last:border-r-0 ${
                    isActive ? "bg-blue-100" : "bg-white hover:bg-gray-100"
                  }`}
                  onClick={() => {
                    // –û–±–º–µ–∂–µ–Ω–Ω—è: max 1 –ø–æ–∑–Ω–∞—á–∫–∞ –¥–ª—è B–µ–ª–æ–º–∞—Ä—à—Ä—É—Ç—É, 2 ‚Äî –¥–ª—è —ñ–Ω—à–∏—Ö
                    const activeKeys = ["showEurovelo", "showVeloParking", "showVeloSTO"].filter(k => params[k]);
                    const isTryingToAdd = !params[key];
                    const maxAllowed = params.icon === "bicycleRoute" ? 1 : 2;

                    if (isTryingToAdd && activeKeys.length >= maxAllowed) return;

                    setParams({ ...params, [key]: !params[key] });
                  }}
                >
                  <svg
                    width={24}
                    height={24}
                    viewBox={`0 0 ${icon.width} ${icon.height}`}
                    className="text-gray-700 mx-auto"
                  >
                    <path d={icon.d} fill="currentColor" fillRule="evenodd" />
                  </svg>
                </button>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
}

// === [6] –†–û–¢–ê–¶–Ü–á –î–õ–Ø –°–¢–†–Ü–õ–û–ö (–¥–ª—è SelectItem —ñ–∫–æ–Ω–æ–∫) ===
B4B7ItemSettings.directionLayout = {
  straight: { rotation: 0 },
  left: { rotation: -90 },
  right: { rotation: 90 },
  "straight-left": { rotation: -45 },
  "straight-right": { rotation: 45 },
  end: { rotation: 0 },
};

export default B4B7ItemSettings;





