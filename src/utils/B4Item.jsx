import React, { useMemo } from "react";
import opentype from "opentype.js";

import PathConfigs from "../config/PathConfigs";
import { computeB4TextLayout } from "./TextLayout";
import RouteBadgeGroup, {
  getRouteBadgeGroupWidth,
} from "../components/svg/RouteBadgeGroup";
import { textToPath } from "../utils/textToPath";

import boldData from "../utils/export/RoadUA-Bold.ttf.base64?raw";
import mediumData from "../utils/export/RoadUA-Medium.ttf.base64?raw";

// === [0] –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –¢–ê –†–û–ó–ü–ê–†–°–ï–ù–ù–Ø –®–†–ò–§–¢–Ü–í ===

const boldBuf = Uint8Array.from(atob(boldData), (c) => c.charCodeAt(0)).buffer;
const mediumBuf = Uint8Array.from(atob(mediumData), (c) => c.charCodeAt(0)).buffer;

const roadUABold = opentype.parse(boldBuf);
const roadUAMedium = opentype.parse(mediumBuf);

// –ë–∞–∑–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —à—Ä–∏—Ñ—Ç—ñ–≤
const BASE_FONT_SIZE_PRIMARY = 38;
const BASE_FONT_SIZE_SECONDARY = 20;
const FONT_VISUAL_HEIGHT_COEFF = 96 / 76;
const DIAGONAL_ARROW_WIDTH = 55.4;

function B4Item({
  params,
  x = 0,
  y = 0,
  transform,
  isLast = false,
  index = 0,
  contentOffsetY = 0,
}) {
  // === [1] –û–ë–†–û–ë–ö–ê –ü–ê–†–ê–ú–ï–¢–†–Ü–í ===

  const TEMP_COLOR = "#F5C30D";
  const shouldShowTemporaryBg = params.isTemporaryRoute === true;
  const isEndRoute = params.direction === "end" && index === 0;

  // –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–ª—é—á–∞ —ñ–∫–æ–Ω–∫–∏
  let iconKey = params.icon;
  if (iconKey === "streetNetwork" && params.isUrbanCenter) {
    iconKey = "cityCentre";
  }

  if (!iconKey) {
    switch (params.numberType) {
      case "veloSTO":
      case "veloParking":
      case "eurovelo":
        iconKey = params.numberType;
    }
  }

  const icon = iconKey && PathConfigs[iconKey];

  // === [2] –†–û–ó–¢–ê–®–£–í–ê–ù–ù–Ø –°–¢–†–Ü–õ–û–ö, –Ü–ö–û–ù–ö–ò –¢–ê –¢–ï–ö–°–¢–£ ===

  const xPadding = 40;
  const arrow = PathConfigs.smallArrow;

  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç–∞ –ø–æ–≤–æ—Ä–æ—Ç —Å—Ç—Ä—ñ–ª–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–ø—Ä—è–º–∫—É
  const directionLayout = {
    left: {
      rotation: -90,
      arrowX: xPadding + (arrow.height - arrow.width) / 2,
      iconX: xPadding + arrow.height + 20,
    },
    straight: {
      rotation: 0,
      arrowX: xPadding,
      iconX: xPadding + arrow.width + 20,
    },
    "straight-left": {
      rotation: -45,
      arrowX: xPadding - 3,
      iconX: xPadding - 3 + DIAGONAL_ARROW_WIDTH + 20,
    },
    right: {
      rotation: 90,
      arrowX: 560 - arrow.width - (arrow.height - arrow.width) / 2,
      iconX: xPadding,
    },
    "straight-right": {
      rotation: 45,
      arrowX: 560 + 3 - DIAGONAL_ARROW_WIDTH,
      iconX: xPadding,
    },
  };

  const layout = directionLayout[params.direction] || {};
  const rotation = layout.rotation || 0;
  const arrowX = layout.arrowX ?? 0;
  const iconX = layout.iconX ?? xPadding;
  const arrowY = 75 - arrow.height / 2;

  // –ü–æ—á–∞—Ç–∫–æ–≤–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
  let textX = xPadding;

  // –ó—Å—É–≤ —Ç–µ–∫—Å—Ç—É –ø—Ä–∞–≤—ñ—à–µ, —è–∫—â–æ —Å—Ç—Ä—ñ–ª–∫–∞ –∑–ª—ñ–≤–∞
  if (["left", "straight", "straight-left"].includes(params.direction)) {
    const arrowVisualWidth = {
      straight: arrow.width,
      left: arrow.height,
      "straight-left": DIAGONAL_ARROW_WIDTH,
    }[params.direction] || 0;

    textX = arrowX + arrowVisualWidth + 20;
  }

  // –î–æ–¥–∞—î–º–æ —à–∏—Ä–∏–Ω—É —ñ–∫–æ–Ω–∫–∏, —è–∫—â–æ —î
  if (icon) {
    textX += icon.width * icon.scale + 20;
  }

  const originalTextX = textX;

  // –Ø–∫—â–æ —î –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –ø–æ alignedTextX ‚Äî –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –π–æ–≥–æ
  if (typeof params.alignedTextX === "number") {
    textX = params.alignedTextX;
  }

  const textXShift = textX - originalTextX;

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤—ñ–¥—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ –ø—ñ–¥ —Å—Ç—Ä—ñ–ª–∫—É (—è–∫—â–æ –Ω–∞–ø—Ä—è–º–æ–∫ –ø—Ä–∞–≤–æ—Ä—É—á)
  const arrowRightSpace = ["right", "straight-right"].includes(params.direction)
    ? (params.direction === "right" ? arrow.height : DIAGONAL_ARROW_WIDTH) + 20
    : 0;

  const badgeGroupWidth = getRouteBadgeGroupWidth(params);

  // –û–±—á–∏—Å–ª—é—î–º–æ —à–∏—Ä–∏–Ω—É, –¥–æ—Å—Ç—É–ø–Ω—É –ø—ñ–¥ –æ—Å–Ω–æ–≤–Ω–∏–π —ñ –¥—Ä—É–≥–æ—Ä—è–¥–Ω–∏–π —Ç–µ–∫—Å—Ç
  const availableTextWidthMain =
    520 - (originalTextX - xPadding) - textXShift - arrowRightSpace - badgeGroupWidth;

  const availableTextWidthSecondary =
    520 - (originalTextX - xPadding) - textXShift - arrowRightSpace;

  // === [3] –†–û–ó–†–ê–•–£–ù–û–ö –¢–ï–ö–°–¢–û–í–û–ì–û –õ–ï–Ø–£–¢–£ ===

  const {
    mainTextLines,
    secondaryLine,
    fontSize1,
    fontSize2,
    applyYShift,
    waveCount,
    waveWidth,
    routeBadgeX,
  } = computeB4TextLayout({
    ...params,
    forcedFontSize1: params.forcedFontSize1 || null,
    alignedTextX: params.alignedTextX || null,
    textX,
    availableTextWidthMain,
    availableTextWidthSecondary,
  });

  // === [4] –ì–ï–ù–ï–†–ê–¶–Ü–Ø –û–°–ù–û–í–ù–û–ì–û –¢–ï–ö–°–¢–£ (1 –∞–±–æ 2 —Ä—è–¥–∫–∏) ===

  const mainTextPaths = useMemo(() => {
    return mainTextLines.map((line, i) => {
      const baselineY =
        mainTextLines.length === 1
          ? 35 + BASE_FONT_SIZE_PRIMARY / 2 - applyYShift
          : i === 0
          ? 35
          : 75;

      return textToPath(
        roadUABold,
        line,
        fontSize1,
        textX,
        baselineY,
        "left",
        "visualX"
      );
    });
  }, [mainTextLines.join("|"), fontSize1, textX, applyYShift]);

  // === [5] –ì–ï–ù–ï–†–ê–¶–Ü–Ø –î–†–£–ì–û–†–Ø–î–ù–û–ì–û –¢–ï–ö–°–¢–£ (–∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–π) ===

  const secondaryPath = useMemo(() => {
    const baselineY =
      mainTextLines.length === 1
        ? 115 -
          BASE_FONT_SIZE_SECONDARY * 0.5 -
          BASE_FONT_SIZE_SECONDARY * (FONT_VISUAL_HEIGHT_COEFF - 1) -
          applyYShift
        : 115;

    return textToPath(
      roadUAMedium,
      secondaryLine,
      fontSize2,
      textX,
      baselineY,
      "left",
      "visualX"
    );
  }, [secondaryLine, fontSize2, textX, mainTextLines.length, applyYShift]);

  // === [6] –†–ï–ù–î–ï–† SVG ===

  return (
    <g transform={transform || `translate(${x}, ${y})`}>
      {/* [6.1] –¢–∏–º—á–∞—Å–æ–≤–∏–π –∂–æ–≤—Ç–∏–π —Ñ–æ–Ω */}
      {shouldShowTemporaryBg &&
        (isLast ? (
          <path
            d={PathConfigs.temporaryRouteFooterBg.d}
            fill={TEMP_COLOR}
            fillRule="evenodd"
          />
        ) : (
          <rect x={10} y={0} width={580} height={150} fill={TEMP_COLOR} />
        ))}

      <g transform={`translate(0, ${contentOffsetY})`}>
        {/* [6.2] –ß–µ—Ä–≤–æ–Ω–∞ —Å–º—É–≥–∞ (–¥–ª—è –Ω–∞–ø—Ä—è–º–∫—É "end") */}
        {isEndRoute && (
          <g
            transform={`translate(
              ${params.b4Items?.length === 1 ? 31 : 0},
              ${params.b4Items?.length === 1 ? -10 : 0}
            )`}
          >
            <path
              d={PathConfigs.stripeBig.d}
              fill="#CC0000"
              fillRule="evenodd"
            />
          </g>
        )}

        {/* [6.3] –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç */}
        {mainTextPaths.map((d, i) => (
          <path
            key={i}
            d={d}
            fill="black"
            style={{ fontFeatureSettings: '"ss02"' }}
          />
        ))}

        {/* [6.4] –ê–Ω–≥–ª—ñ–π—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç (–Ω–∏–∂–Ω—ñ–π —Ä—è–¥–æ–∫) */}
        <path
          d={secondaryPath}
          fill="black"
          style={{ fontFeatureSettings: '"ss02"' }}
        />

        {/* [6.5] –°—Ç—Ä—ñ–ª–∫–∞ */}
        {params.direction !== "end" && !params.hideArrow && (
          <g
            transform={`
              translate(${arrowX}, ${arrowY})
              rotate(${rotation} ${arrow.width / 2} ${arrow.height / 2})
              scale(${arrow.scale})
            `}
          >
            <path d={arrow.d} fill="black" />
          </g>
        )}

        {/* [6.6] –Ü–∫–æ–Ω–∫–∞ */}
        {icon && (
          <g
            transform={`translate(
              ${iconX},
              ${75 - (icon.height * icon.scale) / 2}
            ) scale(${icon.scale})`}
          >
            <path d={icon.d} fill="#000" fillRule="evenodd" />
          </g>
        )}

        {/* [6.7] –•–≤–∏–ª—å–∫–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è water) */}
        {params.icon === "water" && (
          <g transform={`translate(${textX}, 108)`}>
            {Array.from({ length: waveCount }).map((_, i) => (
              <path
                key={i}
                d={PathConfigs.waves.d}
                transform={`translate(${i * waveWidth}, 0) scale(${PathConfigs.waves.scale})`}
                fill="#005187"
              />
            ))}
          </g>
        )}

        {/* [6.8] –ë–µ–π–¥–∂—ñ –º–∞—Ä—à—Ä—É—Ç—É */}
        <RouteBadgeGroup
          params={{
            ...params,
            isTerminus: isEndRoute,
            isTemporaryRoute: shouldShowTemporaryBg,
          }}
          x={routeBadgeX}
          y={35}
        />
      </g>
    </g>
  );
}

export default B4Item;


// === üß© –°–¢–†–£–ö–¢–£–†–ê –ö–û–ú–ü–û–ù–ï–ù–¢–ê B4Item (–¥–æ–≤—ñ–¥–∫–∞ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó) ===
//
// [0] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à—Ä–∏—Ñ—Ç—ñ–≤
//     ‚ñ∏ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è base64-—à—Ä–∏—Ñ—Ç—ñ–≤ —Ç–∞ —ó—Ö –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ opentype.js
//
// [1] –û–±—Ä–æ–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
//     ‚ñ∏ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ø—Ä—è–º–∫—É "end", —Ç–∏–º—á–∞—Å–æ–≤–æ—Å—Ç—ñ, –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏
//
// [2] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∑–∏—Ü—ñ–π
//     ‚ñ∏ –°—Ç—Ä—ñ–ª–∫–∞, —ñ–∫–æ–Ω–∫–∞, –∑–º—ñ—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—Ä–∞–≤–æ—Ä—É—á
//     ‚ñ∏ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —à–∏—Ä–∏–Ω–∏ —Ç–µ–∫—Å—Ç—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —ñ–∫–æ–Ω–æ–∫ —ñ —Å—Ç—Ä—ñ–ª–æ–∫
//
// [3] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ª–µ—è—É—Ç—É
//     ‚ñ∏ computeB4TextLayout –æ–±—á–∏—Å–ª—é—î —Ç–µ–∫—Å—Ç, —à—Ä–∏—Ñ—Ç–∏, —Ö–≤–∏–ª—å–∫–∏, –±–µ–π–¥–∂—ñ
//
// [4] –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
//     ‚ñ∏ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫ —É SVG path
//
// [5] –î—Ä—É–≥–æ—Ä—è–¥–Ω–∏–π —Ç–µ–∫—Å—Ç
//     ‚ñ∏ –†–æ–∑—Ä–∞—Ö–æ–≤—É—î baseline –¥–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ–≥–æ —Ä—è–¥–∫–∞ —ñ —Ç–µ–∂ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º—É—î —É path
//  
// [6] –†–µ–Ω–¥–µ—Ä
//
//   [6.1] –¢–∏–º—á–∞—Å–æ–≤–∏–π –∂–æ–≤—Ç–∏–π —Ñ–æ–Ω
//   [6.2] –ß–µ—Ä–≤–æ–Ω–∞ —Å–º—É–≥–∞ (–¥–ª—è "end")
//   [6.3] –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç (–≤–µ—Ä—Ö–Ω—ñ–π)
//   [6.4] –ê–Ω–≥–ª—ñ–π—Å—å–∫–∏–π —Ä—è–¥–æ–∫ (–Ω–∏–∂–Ω—ñ–π)
//   [6.5] –°—Ç—Ä—ñ–ª–∫–∞
//   [6.6] –Ü–∫–æ–Ω–∫–∞
//   [6.7] –•–≤–∏–ª—å–∫–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è water)
//   [6.8] –ë–µ–π–¥–∂—ñ –º–∞—Ä—à—Ä—É—Ç—ñ–≤
//
// =================================================================
