import React from "react";
import RectRenderer from "./RectRenderer";
import B4Item from "./B4Item";
import B4B7Header from "../components/svg/B4B7Header";
import RectConfigs from "../config/RectConfigs";
import {
  getMinimalFontSizeAcrossB4Items,
  getAlignedTextXMap,
} from "./TextLayout";
import PathConfigs from "../config/PathConfigs";
import { getRouteBadgeGroupWidth } from "../components/svg/RouteBadgeGroup";

// === [0] –î–û–ü–û–ú–Ü–ñ–ù–ê –§–£–ù–ö–¶–Ü–Ø: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∑–∏—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É —Ç–∞ —à–∏—Ä–∏–Ω –¥–ª—è —Ç–µ–∫—Å—Ç—É ===
function calculateTextXAndWidths(params) {
  const xPadding = 40;
  const arrow = PathConfigs.smallArrow;
  const DIAGONAL_ARROW_WIDTH = 55.4;

  // –ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥ –Ω–∞–ø—Ä—è–º–∫—É —Ä—É—Ö—É
  const directionLayout = {
    left: { arrowX: xPadding + (arrow.height - arrow.width) / 2 },
    straight: { arrowX: xPadding },
    "straight-left": { arrowX: xPadding - 3 },
    right: {
      arrowX: 560 - arrow.width - (arrow.height - arrow.width) / 2,
    },
    "straight-right": {
      arrowX: 560 + 3 - DIAGONAL_ARROW_WIDTH,
    },
  };

  const layout = directionLayout[params.direction] || {};
  const arrowX = layout.arrowX ?? 0;

  // –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç–µ–∫—Å—Ç—É
  let textX = xPadding;

  // –ó—Å—É–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç, —è–∫—â–æ —Å—Ç—Ä—ñ–ª–∫–∞ –ª—ñ–≤–æ—Ä—É—á
  if (["left", "straight", "straight-left"].includes(params.direction)) {
    const arrowWidthMap = {
      straight: arrow.width,
      left: arrow.height,
      "straight-left": DIAGONAL_ARROW_WIDTH,
    };

    const arrowVisualWidth = arrowWidthMap[params.direction] || 0;
    textX = arrowX + arrowVisualWidth + 20;
  }

  // –û–±—Ä–æ–±–∫–∞ —ñ–∫–æ–Ω–∫–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ —Ç–∏–ø
  let iconKey = params.icon;
  if (iconKey === "streetNetwork" && params.isUrbanCenter) {
    iconKey = "cityCentre";
  }

  if (!iconKey) {
    switch (params.numberType) {
      case "veloSTO":
      case "veloParking":
      case "eurovelo":
        iconKey = params.numberType;
    }
  }

  const icon = iconKey && PathConfigs[iconKey];
  if (icon) {
    textX += icon.width * icon.scale + 20;
  }

  const badgeGroupWidth = getRouteBadgeGroupWidth(params);

  const arrowRightSpace = ["right", "straight-right"].includes(params.direction)
    ? (params.direction === "right" ? arrow.height : DIAGONAL_ARROW_WIDTH) + 20
    : 0;

  const availableTextWidthMain =
    520 - (textX - xPadding) - arrowRightSpace - badgeGroupWidth;

  const availableTextWidthSecondary =
    520 - (textX - xPadding) - arrowRightSpace;

  return {
    textX,
    availableTextWidthMain,
    availableTextWidthSecondary,
  };
}

// === [1] –ö–û–ú–ü–û–ù–ï–ù–¢ –¢–ê–ë–õ–ò–ß–ö–ò B4 –ó –ö–Ü–õ–¨–ö–û–ú–ê –ù–ê–ü–†–Ø–ú–ö–ê–ú–ò ===
function B4({ params }) {
  const itemCount = params.b4Items?.length || 1;

  // –†–æ–∑–º—ñ—Ä–∏ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ —Ç–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
  const outerRect = RectConfigs[`B${itemCount + 3}`];
  const innerRect = RectConfigs[`strokeB${itemCount + 3}`];

  const showBlackLine = params.tableType === "temporary";

  // Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  const baseY = 200;
  const itemHeight = 150;
  const arrowOverlapOffset = -13;

  // === [1.1] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Y-–ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç—É B4 ===
  const b4ItemY = (index, hideArrow) =>
    baseY + index * itemHeight + (hideArrow ? arrowOverlapOffset : 0);

  // === [1.2] –ú–∞–ª—é–≤–∞–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª—å–Ω–∏—Ö –ª—ñ–Ω—ñ–π –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ –Ω–∞–ø—Ä—è–º–∫–∞–º–∏ ===
  const renderSeparatorLines = () => {
    const lines = [];

    for (let i = 1; i < params.b4Items.length; i++) {
      const prev = params.b4Items[i - 1];
      const curr = params.b4Items[i];

      // –Ø–∫—â–æ –Ω–∞–ø—Ä—è–º–∫–∏ –∑–º—ñ–Ω–∏–ª–∏—Å—è ‚Äî –¥–æ–¥–∞—î–º–æ —Ä–æ–∑–¥—ñ–ª—å–Ω—É –ª—ñ–Ω—ñ—é
      if (prev.direction !== curr.direction) {
        const y = baseY + i * itemHeight - 3;

        lines.push(
          <rect
            key={`line-${i}`}
            x={10}
            y={y}
            width={580}
            height={6}
            fill="#000000"
          />
        );
      }
    }

    return lines;
  };

  // === [2] –ü–Ü–î–ì–û–¢–û–í–ö–ê –ï–õ–ï–ú–ï–ù–¢–Ü–í: –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è, —Ä–æ–∑–º—ñ—Ä–∏ —à—Ä–∏—Ñ—Ç—ñ–≤ ===

  let alignedTextXMap = new Map();
  let forcedFontSize1 = null;
  let preparedItems = [];

  if (Array.isArray(params.b4Items)) {
    // –ö–æ–ø—ñ—é—î–º–æ —Ç–∞ —Ä–æ–∑—à–∏—Ä—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É
    preparedItems = params.b4Items.map((item, index) => {
      const mergedParams = {
        ...params,
        ...item,
      };

      const layout = calculateTextXAndWidths(mergedParams);

      return {
        ...mergedParams,
        ...layout,
      };
    });

    // –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è textX –º—ñ–∂ —Å—Ö–æ–∂–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
    alignedTextXMap = getAlignedTextXMap(preparedItems);

    // –ü—Ä–∏–º—É—Å–æ–≤–µ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —à—Ä–∏—Ñ—Ç—ñ–≤, —è–∫—â–æ –∑–∞–¥–∞–Ω–æ
    if (params.forceUniformTextSize) {
      const withAligned = preparedItems.map((item, index) => ({
        ...item,
        ...(alignedTextXMap.has(index) && {
          textX: alignedTextXMap.get(index),
        }),
      }));

      forcedFontSize1 = getMinimalFontSizeAcrossB4Items(withAligned);
    }
  }

  // === [3] –†–ï–ù–î–ï–† –ö–û–ú–ü–û–ù–ï–ù–¢–ê ===

  return (
    <svg
      width={outerRect.outerWidth}
      height={outerRect.outerHeight}
      xmlns="http://www.w3.org/2000/svg"
    >
      {/* [3.1] –ó–æ–≤–Ω—ñ—à–Ω—è —Ä–∞–º–∫–∞ */}
      <RectRenderer
        config={outerRect}
        outerColor="#FFFFFF"
        innerColor="#FFFFFF"
        x={0}
        y={0}
      />

      {/* [3.2] –ï–ª–µ–º–µ–Ω—Ç–∏ B4Item (–Ω–∞–ø—Ä—è–º–∫–∏) */}
      {params.b4Items?.map((itemParams, index) => {
        const prev = index > 0 ? params.b4Items[index - 1] : null;
        const hideArrow = prev && prev.direction === itemParams.direction;
        const isLast = index === params.b4Items.length - 1;
        const contentOffsetY = hideArrow ? arrowOverlapOffset : 0;

        const finalParams = {
          ...preparedItems[index],
          hideArrow,
          ...(alignedTextXMap.has(index) && {
            alignedTextX: alignedTextXMap.get(index),
          }),
          ...(forcedFontSize1 && { forcedFontSize1 }),
        };

        return (
          <B4Item
            key={index}
            index={index}
            x={0}
            y={b4ItemY(index, false)}
            isLast={isLast}
            contentOffsetY={contentOffsetY}
            params={finalParams}
            onTooLong={(val) => updateTooLongFlag(index, val)} // !!! —è–∫—â–æ –Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–æ - –≤–∏–Ω–µ—Å—Ç–∏ –Ω–∞–≤–µ—Ä—Ö
          />
        );
      })}

      {/* [3.3] –í–Ω—É—Ç—Ä—ñ—à–Ω—è —á–æ—Ä–Ω–∞ —Ä–∞–º–∫–∞ */}
      <RectRenderer
        config={innerRect}
        outerColor="#000000"
        innerColor="none"
        x={7}
        y={7}
      />

      {/* [3.4] –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <B4B7Header params={params} />

      {/* [3.5] –†–æ–∑–¥—ñ–ª—å–Ω—ñ –ª—ñ–Ω—ñ—ó –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ –Ω–∞–ø—Ä—è–º–∫–∞–º–∏ */}
      {renderSeparatorLines()}

      {/* [3.6] –í–µ—Ä—Ö–Ω—è —á–æ—Ä–Ω–∞ –ª—ñ–Ω—ñ—è –¥–ª—è "temporary" —Ç–∞–±–ª–∏—á–æ–∫ */}
      {showBlackLine && (
        <rect x={10} y={197} width={580} height={6} fill="#000000" />
      )}
    </svg>
  );
}

export default B4;


// === üß© –°–¢–†–£–ö–¢–£–†–ê –ö–û–ú–ü–û–ù–ï–ù–¢–ê B4 (–¥–æ–≤—ñ–¥–∫–∞ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó) ===
//
// [0] calculateTextXAndWidths
//     ‚ñ∏ –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç–µ–∫—Å—Ç—É (textX)
//     ‚ñ∏ –û–±—Ä–∞—Ö–æ–≤—É—î —à–∏—Ä–∏–Ω—É –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É –ø—ñ–¥ –æ—Å–Ω–æ–≤–Ω–∏–π —ñ –¥—Ä—É–≥–æ—Ä—è–¥–Ω–∏–π —Ç–µ–∫—Å—Ç
//     ‚ñ∏ –í—Ä–∞—Ö–æ–≤—É—î —Ç–∏–ø —Å—Ç—Ä—ñ–ª–∫–∏, —ñ–∫–æ–Ω–∫—É, –≤—ñ–¥—Å—Ç—É–ø–∏, –±–µ–π–¥–∂—ñ
//
// [1] B4 ‚Äî –≥–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç
//
//   [1.1] b4ItemY()
//         ‚ñ∏ –û–±—á–∏—Å–ª—é—î Y-–ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —ñ–Ω–¥–µ–∫—Å—É —Ç–∞ —Ç–æ–≥–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ö–æ–≤–∞—Ç–∏ —Å—Ç—Ä—ñ–ª–∫—É
//
//   [1.2] renderSeparatorLines()
//         ‚ñ∏ –†–µ–Ω–¥–µ—Ä–∏—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ñ —á–æ—Ä–Ω—ñ –ª—ñ–Ω—ñ—ó –º—ñ–∂ –Ω–∞–ø—Ä—è–º–∫–∞–º–∏, —è–∫—â–æ –≤–æ–Ω–∏ –∑–º—ñ–Ω—é—é—Ç—å—Å—è
//
// [2] –ü–Ü–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ò–•
//     ‚ñ∏ –§–æ—Ä–º—É—î –º–∞—Å–∏–≤ preparedItems –Ω–∞ –æ—Å–Ω–æ–≤—ñ b4Items
//     ‚ñ∏ –í–∏–∫–æ–Ω—É—î –æ–±—á–∏—Å–ª–µ–Ω–Ω—è textX —Ç–∞ —à–∏—Ä–∏–Ω
//     ‚ñ∏ –í–∏–∑–Ω–∞—á–∞—î –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –º—ñ–∂ —Å—Ö–æ–∂–∏–º–∏ –Ω–∞–ø—Ä—è–º–∫–∞–º–∏
//     ‚ñ∏ –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –æ–¥–Ω–∞–∫–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ forceUniformTextSize
//
// [3] –†–ï–ù–î–ï–†
//
//   [3.1] <RectRenderer outer>
//         ‚ñ∏ –ú–∞–ª—é—î –∑–æ–≤–Ω—ñ—à–Ω—ñ–π –±—ñ–ª–∏–π –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫
//
//   [3.2] <B4Item>
//         ‚ñ∏ –†–µ–Ω–¥–µ—Ä–∏—Ç—å –∫–æ–∂–µ–Ω –Ω–∞–ø—Ä—è–º–æ–∫/–µ–ª–µ–º–µ–Ω—Ç –º–∞—Ä—à—Ä—É—Ç—É
//         ‚ñ∏ –ü–µ—Ä–µ–¥–∞—î hideArrow, alignedTextX, forcedFontSize1
//
//   [3.3] <RectRenderer inner>
//         ‚ñ∏ –ú–∞–ª—é—î —á–æ—Ä–Ω—É —Ä–∞–º–∫—É –∑–≤–µ—Ä—Ö—É –±—ñ–ª–æ–≥–æ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
//
//   [3.4] <B4B7Header />
//         ‚ñ∏ –í–∏–≤–æ–¥–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
//
//   [3.5] renderSeparatorLines()
//         ‚ñ∏ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ñ —Ä–æ–∑–¥—ñ–ª—å–Ω—ñ –ª—ñ–Ω—ñ—ó –º—ñ–∂ –Ω–∞–ø—Ä—è–º–∫–∞–º–∏
//
//   [3.6] –í–µ—Ä—Ö–Ω—è —á–æ—Ä–Ω–∞ –ª—ñ–Ω—ñ—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
//         ‚ñ∏ –í—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è, —è–∫—â–æ tableType === "temporary"
//         ‚ñ∏ –†–æ–∑–º—ñ—â—É—î—Ç—å—Å—è –Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ñ Y (197)
//
// =================================================================
